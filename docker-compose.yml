version: '3'
services:
  editor-server: # 服务名称（自定义）之nodejs服务
    build: 
      context: . # 当前目录
      dockerfile: Dockerfile # 基于 Dockerfile 构建
    image: editor-server # 依赖于当前Dockerfile 创建出来的镜像
    container_name: editor-server # 容器名称
    ports:
      - 8081:3000 # 宿主机通过 8081 访问，即端口的映射
  editor-redis: # 服务名称（自定义）之redis服务
    image: redis # 引用官方提供的redis镜像
    container_name: editor-redis # 容器名称
    ports:
    # 宿主机(本机)，可以用127.0.0.1:6378连接容器中的redis数据库，使用redis-cli -h 127.0.0.1 -p 6378
    # 但是，其他 docker 容器不能，因为此时127.0.0.1是容器本身，而不是宿主机
      - 6378:6379
    environment:
      - TZ=Asia/Shanghai # 通过设置环境变量方式设置时区
  editor-mysql:
    image: mysql # 引用官方mysql镜像
    container_name: editor-mysql 
    restart: always
    privileged: true # 高权限 执行 volumes中的mysql/init
    command: --default-authentication-plugin=mysql_native_password # 远程访问
    ports:
      - 3305:3306
    volumes:
      - .docker-volumes/mysql/log:/var/log/mysql  # 记录日志
      - .docker-volumes/mysql/data:/var/lib/mysql # 数据持久化
      - ./mysql/init:/docker-entrypoint-initdb.d/ # 初始化sql
    environment:
      - MYSQL_DATABASE=still_lego # 指定database
      - MYSQL_ROOT_PASSWORD=root  # 密码
      - TZ=Asia/Shanghai          # 时区
  editor-mongo:
    image: mongo # 引用官方mongo镜像
    container_name: editor-mongo
    restart: always # 如果容器报错，就重启
    volumes:
      - '.docker-volumes/mongo/data:/data/db' # 数据持久化
    environment:
      - MONGO_INITDB_DATABASE=still_lego # 指定数据库名字
      - TZ=Asia/Shanghai
    ports:
      - '27016:27017'